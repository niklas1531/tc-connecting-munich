import { ContactFormGroup } from '../components/proposal-create-contacts/proposal-create-contacts.types';
import {
  ContentFormGroup,
  DetailsFormGroup,
} from '../components/proposal-create.types';
import { autoGeneratedProposalParts } from '../interfaces/proposal';
import { ProposalAccessibilty } from '../interfaces/proposal-accessibilty';
import { ProposalType } from '../interfaces/proposal-type';

export class ProposalCreateOperations {
  public static patchContentFormGroup(
    inCreationProposal: autoGeneratedProposalParts,
    contentForm: ContentFormGroup
  ): void {
    contentForm.patchValue({
      title: inCreationProposal.title,
      summary: inCreationProposal.summary,
      glossaries: inCreationProposal.glossaries,
    });
  }

  public static patchFileFormGroup(file: File, fileForm) {
    fileForm.patchValue({
      file,
    });
  }

  public static patchDetailsFormGroup(
    inCreationProposal: autoGeneratedProposalParts,
    detailsForm: DetailsFormGroup
  ): void {
    const currentDate = new Date();
    let deadlineDate = new Date();
    deadlineDate.setMonth(currentDate.getMonth() + 6);
    detailsForm.patchValue({
      createdAt: currentDate.toISOString(),
      registeredAt: currentDate.toISOString(),
      processingDeadline: deadlineDate.toISOString(),
      processingTime: 6,
      responsibleDepartment: inCreationProposal.responsibleDepartment,
      art: ProposalAccessibilty.Ã–FFENTLICH,
      type: ProposalType.STR_ANTRAG,
      electionPeriod: '2024',
    });
  }

  public static patchContactsFormGroup(
    inCreationProposal: autoGeneratedProposalParts,
    contactsForm: ContactFormGroup
  ): void {
    contactsForm.patchValue({
      responsibles: inCreationProposal.responsibles,
    });
  }
}
